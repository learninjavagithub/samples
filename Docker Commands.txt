 
1. Create source file, say Hello.java
2. Create docker config file, say Dockerfile (no extension is required)
3. Start the docker - systemctl start docker
4. Build the application - docker build -t java-app .
5. Run the application - 
  docker run java-app           - creates an image and runs the command but leaves the container without deleting
  docker run --rm java-app      - creates an image and runs the command and deletes the new container created
  
  Check if the image is created using the command : docker ps -a
  
  docker rm <CONTAINER ID from above command>  - deletes the stopped container
  docker kill <CONTAINER ID from above command> - kills a running container 
  
6. Check status - systemctl status docker
   Stop docker  - systemctl stop docker
   
   
   Removing a container(for re-building):
   docker ps -a   - get all the containers by name
   docker stop -a name_of_the_docker_container - Stop the container first using this command
   docker rm name_of_the_docker_container - remove the container

   
Other commands:
docker images 		- list all the images in the system
docker images java 	- list all images by name
docker images java:8	- list all images by name and tag
docker system df 	- disk usage
docker system df -v 	- disk usage, verbose 
docker system info 	- Display system info
docker system events 	- Realtime events from the server



For nginx,

Build: docker build -t cp-nginx .

Run: docker run --name community-portal -d -p 8080:80 cp-nginx


Running on another port:
1. docker stop community-portal
2. docker rm community-portal
3. docker run --name community-portal -d -p 80:80 cp-nginx
